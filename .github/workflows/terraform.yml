name: Terraform CI/CD

on:
  push:
    paths:
      - 'terraform/**'
  pull_request:
    paths:
      - 'terraform/**'

env:
  TERRAFORM_VERSION_FILE: .terraform-version

jobs:
  validate-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Terraform version
        id: tfversion
        run: echo "::set-output name=version::$(cat ${{ env.TERRAFORM_VERSION_FILE }})"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.tfversion.outputs.version }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./terraform

      - name: Validate Terraform code
        run: terraform validate
        working-directory: ./terraform

      - name: Install TFLint
        run: |
          curl -L -o tflint.zip https://github.com/terraform-linters/tflint/releases/latest/download/tflint_linux_amd64.zip
          unzip tflint.zip
          sudo mv tflint /usr/local/bin/
          rm tflint.zip

      - name: Run TFLint
        run: tflint
        working-directory: ./terraform

  apply-on-merge:
    needs: validate-scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Terraform version
        id: tfversion
        run: echo "::set-output name=version::$(cat ${{ env.TERRAFORM_VERSION_FILE }})"        

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.tfversion.outputs.version }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply tfplan -auto-approve
        working-directory: ./terraform
        env:
          TF_VAR_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}